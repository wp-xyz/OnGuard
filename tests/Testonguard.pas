unit Testonguard;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Windows, ogutil, Controls, onguard, Classes, SysUtils, System.AnsiStrings,
  ogconst;

type
  // Test methods for class TOgCodeBase

  TestTOgCodeBase = class(TTestCase)
  strict private
    FOgCodeBase: TOgCodeBase;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCheckCode;
    procedure TestIsCodeValid;
  end;
  // Test methods for class TOgMakeCodes

  TestTOgMakeCodes = class(TTestCase)
  strict private
    FOgMakeCodes: TOgMakeCodes;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestExecute;
    procedure TestGetCode;
    procedure TestSetCode;
    procedure TestGetKey;
    procedure TestSetKey;
  end;
  // Test methods for class TOgMakeKeys

  TestTOgMakeKeys = class(TTestCase)
  strict private
    FOgMakeKeys: TOgMakeKeys;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestExecute;
    procedure TestApplyModifierToKey;
    procedure TestGenerateDateModifier;
    procedure TestGenerateMachineModifier;
    procedure TestGenerateMDKey;
    procedure TestGenerateRandomKey;
    procedure TestGenerateStringModifier;
    procedure TestGenerateUniqueModifier;
    procedure TestSetKey;
    procedure TestGetKey;
  end;
  // Test methods for class TOgDateCode

  TestTOgDateCode = class(TTestCase)
  strict private
    FOgDateCode: TOgDateCode;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCheckCode;
    procedure TestGetValue;
  end;
  // Test methods for class TOgDaysCode

  TestTOgDaysCode = class(TTestCase)
  strict private
    FOgDaysCode: TOgDaysCode;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCheckCode;
    procedure TestDecrease;
    procedure TestGetValue;
  end;
  // Test methods for class TOgRegistrationCode

  TestTOgRegistrationCode = class(TTestCase)
  strict private
    FOgRegistrationCode: TOgRegistrationCode;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCheckCode;
  end;
  // Test methods for class TOgSerialNumberCode

  TestTOgSerialNumberCode = class(TTestCase)
  strict private
    FOgSerialNumberCode: TOgSerialNumberCode;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCheckCode;
    procedure TestGetValue;
  end;
  // Test methods for class TOgSpecialCode

  TestTOgSpecialCode = class(TTestCase)
  strict private
    FOgSpecialCode: TOgSpecialCode;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCheckCode;
    procedure TestGetValue;
  end;
  // Test methods for class TOgUsageCode

  TestTOgUsageCode = class(TTestCase)
  strict private
    FOgUsageCode: TOgUsageCode;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCheckCode;
    procedure TestDecrease;
    procedure TestGetValue;
  end;

implementation

procedure TestTOgCodeBase.SetUp;
begin
  FOgCodeBase := TOgCodeBase.Create(nil);
end;

procedure TestTOgCodeBase.TearDown;
begin
  FOgCodeBase.Free;
  FOgCodeBase := nil;
end;

procedure TestTOgCodeBase.TestCheckCode;
var
  ReturnValue: TCodeStatus;
  Report: Boolean;
begin
  // TODO: Setup method call parameters
  ReturnValue := FOgCodeBase.CheckCode(Report);
  // TODO: Validate method results
end;

procedure TestTOgCodeBase.TestIsCodeValid;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FOgCodeBase.IsCodeValid;
  // TODO: Validate method results
end;

procedure TestTOgMakeCodes.SetUp;
begin
  FOgMakeCodes := TOgMakeCodes.Create(nil);
end;

procedure TestTOgMakeCodes.TearDown;
begin
  FOgMakeCodes.Free;
  FOgMakeCodes := nil;
end;

procedure TestTOgMakeCodes.TestExecute;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FOgMakeCodes.Execute;
  // TODO: Validate method results
end;

procedure TestTOgMakeCodes.TestGetCode;
var
  Value: TCode;
begin
  // TODO: Setup method call parameters
  FOgMakeCodes.GetCode(Value);
  // TODO: Validate method results
end;

procedure TestTOgMakeCodes.TestSetCode;
var
  Value: TCode;
begin
  // TODO: Setup method call parameters
  FOgMakeCodes.SetCode(Value);
  // TODO: Validate method results
end;

procedure TestTOgMakeCodes.TestGetKey;
var
  Value: TKey;
begin
  // TODO: Setup method call parameters
  FOgMakeCodes.GetKey(Value);
  // TODO: Validate method results
end;

procedure TestTOgMakeCodes.TestSetKey;
var
  Value: TKey;
begin
  // TODO: Setup method call parameters
  FOgMakeCodes.SetKey(Value);
  // TODO: Validate method results
end;

procedure TestTOgMakeKeys.SetUp;
begin
  FOgMakeKeys := TOgMakeKeys.Create(nil);
end;

procedure TestTOgMakeKeys.TearDown;
begin
  FOgMakeKeys.Free;
  FOgMakeKeys := nil;
end;

procedure TestTOgMakeKeys.TestExecute;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FOgMakeKeys.Execute;
  // TODO: Validate method results
end;

procedure TestTOgMakeKeys.TestApplyModifierToKey;
var
  KeySize: Cardinal;
  Key: TObject;
  Modifier: System.Integer;
begin
  // TODO: Setup method call parameters
  FOgMakeKeys.ApplyModifierToKey(Modifier, Key, KeySize);
  // TODO: Validate method results
end;

procedure TestTOgMakeKeys.TestGenerateDateModifier;
var
  ReturnValue: System.Integer;
  D: TDateTime;
begin
  // TODO: Setup method call parameters
  ReturnValue := FOgMakeKeys.GenerateDateModifier(D);
  // TODO: Validate method results
end;

procedure TestTOgMakeKeys.TestGenerateMachineModifier;
var
  ReturnValue: System.Integer;
begin
  ReturnValue := FOgMakeKeys.GenerateMachineModifier;
  // TODO: Validate method results
end;

procedure TestTOgMakeKeys.TestGenerateMDKey;
var
  Str: AnsiString;
  KeySize: Cardinal;
  Key: TObject;
begin
  // TODO: Setup method call parameters
  FOgMakeKeys.GenerateMDKey(Key, KeySize, Str);
  // TODO: Validate method results
end;

procedure TestTOgMakeKeys.TestGenerateRandomKey;
var
  KeySize: Cardinal;
  Key: TObject;
begin
  // TODO: Setup method call parameters
  FOgMakeKeys.GenerateRandomKey(Key, KeySize);
  // TODO: Validate method results
end;

procedure TestTOgMakeKeys.TestGenerateStringModifier;
var
  ReturnValue: System.Integer;
  S: AnsiString;
begin
  // TODO: Setup method call parameters
  ReturnValue := FOgMakeKeys.GenerateStringModifier(S);
  // TODO: Validate method results
end;

procedure TestTOgMakeKeys.TestGenerateUniqueModifier;
var
  ReturnValue: System.Integer;
begin
  ReturnValue := FOgMakeKeys.GenerateUniqueModifier;
  // TODO: Validate method results
end;

procedure TestTOgMakeKeys.TestSetKey;
var
  Value: TKey;
begin
  // TODO: Setup method call parameters
  FOgMakeKeys.SetKey(Value);
  // TODO: Validate method results
end;

procedure TestTOgMakeKeys.TestGetKey;
var
  Value: TKey;
begin
  // TODO: Setup method call parameters
  FOgMakeKeys.GetKey(Value);
  // TODO: Validate method results
end;

procedure TestTOgDateCode.SetUp;
begin
  FOgDateCode := TOgDateCode.Create(nil);
end;

procedure TestTOgDateCode.TearDown;
begin
  FOgDateCode.Free;
  FOgDateCode := nil;
end;

procedure TestTOgDateCode.TestCheckCode;
var
  ReturnValue: TCodeStatus;
  Report: Boolean;
begin
  // TODO: Setup method call parameters
  ReturnValue := FOgDateCode.CheckCode(Report);
  // TODO: Validate method results
end;

procedure TestTOgDateCode.TestGetValue;
var
  ReturnValue: TDateTime;
begin
  ReturnValue := FOgDateCode.GetValue;
  // TODO: Validate method results
end;

procedure TestTOgDaysCode.SetUp;
begin
  FOgDaysCode := TOgDaysCode.Create(nil);
end;

procedure TestTOgDaysCode.TearDown;
begin
  FOgDaysCode.Free;
  FOgDaysCode := nil;
end;

procedure TestTOgDaysCode.TestCheckCode;
var
  ReturnValue: TCodeStatus;
  Report: Boolean;
begin
  // TODO: Setup method call parameters
  ReturnValue := FOgDaysCode.CheckCode(Report);
  // TODO: Validate method results
end;

procedure TestTOgDaysCode.TestDecrease;
begin
  FOgDaysCode.Decrease;
  // TODO: Validate method results
end;

procedure TestTOgDaysCode.TestGetValue;
var
  ReturnValue: System.Integer;
begin
  ReturnValue := FOgDaysCode.GetValue;
  // TODO: Validate method results
end;

procedure TestTOgRegistrationCode.SetUp;
begin
  FOgRegistrationCode := TOgRegistrationCode.Create(nil);
end;

procedure TestTOgRegistrationCode.TearDown;
begin
  FOgRegistrationCode.Free;
  FOgRegistrationCode := nil;
end;

procedure TestTOgRegistrationCode.TestCheckCode;
var
  ReturnValue: TCodeStatus;
  Report: Boolean;
begin
  // TODO: Setup method call parameters
  ReturnValue := FOgRegistrationCode.CheckCode(Report);
  // TODO: Validate method results
end;

procedure TestTOgSerialNumberCode.SetUp;
begin
  FOgSerialNumberCode := TOgSerialNumberCode.Create(nil);
end;

procedure TestTOgSerialNumberCode.TearDown;
begin
  FOgSerialNumberCode.Free;
  FOgSerialNumberCode := nil;
end;

procedure TestTOgSerialNumberCode.TestCheckCode;
var
  ReturnValue: TCodeStatus;
  Report: Boolean;
begin
  // TODO: Setup method call parameters
  ReturnValue := FOgSerialNumberCode.CheckCode(Report);
  // TODO: Validate method results
end;

procedure TestTOgSerialNumberCode.TestGetValue;
var
  ReturnValue: System.Integer;
begin
  ReturnValue := FOgSerialNumberCode.GetValue;
  // TODO: Validate method results
end;

procedure TestTOgSpecialCode.SetUp;
begin
  FOgSpecialCode := TOgSpecialCode.Create(nil);
end;

procedure TestTOgSpecialCode.TearDown;
begin
  FOgSpecialCode.Free;
  FOgSpecialCode := nil;
end;

procedure TestTOgSpecialCode.TestCheckCode;
var
  ReturnValue: TCodeStatus;
  Report: Boolean;
begin
  // TODO: Setup method call parameters
  ReturnValue := FOgSpecialCode.CheckCode(Report);
  // TODO: Validate method results
end;

procedure TestTOgSpecialCode.TestGetValue;
var
  ReturnValue: System.Integer;
begin
  ReturnValue := FOgSpecialCode.GetValue;
  // TODO: Validate method results
end;

procedure TestTOgUsageCode.SetUp;
begin
  FOgUsageCode := TOgUsageCode.Create(nil);
end;

procedure TestTOgUsageCode.TearDown;
begin
  FOgUsageCode.Free;
  FOgUsageCode := nil;
end;

procedure TestTOgUsageCode.TestCheckCode;
var
  ReturnValue: TCodeStatus;
  Report: Boolean;
begin
  // TODO: Setup method call parameters
  ReturnValue := FOgUsageCode.CheckCode(Report);
  // TODO: Validate method results
end;

procedure TestTOgUsageCode.TestDecrease;
begin
  FOgUsageCode.Decrease;
  // TODO: Validate method results
end;

procedure TestTOgUsageCode.TestGetValue;
var
  ReturnValue: System.Integer;
begin
  ReturnValue := FOgUsageCode.GetValue;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTOgCodeBase.Suite);
  RegisterTest(TestTOgMakeCodes.Suite);
  RegisterTest(TestTOgMakeKeys.Suite);
  RegisterTest(TestTOgDateCode.Suite);
  RegisterTest(TestTOgDaysCode.Suite);
  RegisterTest(TestTOgRegistrationCode.Suite);
  RegisterTest(TestTOgSerialNumberCode.Suite);
  RegisterTest(TestTOgSpecialCode.Suite);
  RegisterTest(TestTOgUsageCode.Suite);
end.

